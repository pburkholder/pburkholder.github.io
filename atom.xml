<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Blog]]></title>
  <link href="http://pburkholder.github.io/atom.xml" rel="self"/>
  <link href="http://pburkholder.github.io/"/>
  <updated>2016-01-29T19:27:21-05:00</updated>
  <id>http://pburkholder.github.io/</id>
  <author>
    <name><![CDATA[Peter Burkholder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[6 Ways to Resolve Chef Cookbook Version Conflicts]]></title>
    <link href="http://pburkholder.github.io/blog/2016/01/29/6-ways-to-resolve-chef-cookbook-version-conflicts/"/>
    <updated>2016-01-29T19:06:58-05:00</updated>
    <id>http://pburkholder.github.io/blog/2016/01/29/6-ways-to-resolve-chef-cookbook-version-conflicts</id>
    <content type="html"><![CDATA[<p>Six ways to resolve Chef cookbook version conflicts</p>

<h2>Problem</h2>

<p><em>From one of my customers:</em></p>

<p>Our <code>appdev</code> role now depends on the <code>perforce</code> cookbook from Supermarket. The <code>perforce</code> cookbook&rsquo;s metadata specifies the dependency <code>depends windows, '~&gt; 1.38'</code></p>

<p>Problem is, we&rsquo;ve pinned our five environments to windows 1.36.1, and we&rsquo;re not in a position to upgrade to 1.38.0 just now.</p>

<p>We&rsquo;re using a current version of chef-client and chef-server. How can we include Perforce in our appdev role without inflicting too much pain on ourselves?</p>

<h2>Solution</h2>

<p>There&rsquo;s no perfect solution for this, as they all have some tradeoffs, so you&rsquo;ll need to decide with path works for you.</p>

<p>This answer refers to the <code>perforce</code> and <code>windows</code> cookbooks per the original answer, but substitute in whatever cookbook constraints you are working under.</p>

<h3>Preliminaries:</h3>

<p>Before we address the various approaches, let&rsquo;s review cookbook dependency management.  First, cookbook dependencies for Chef 11/12 can be specified in any of four places:</p>

<ul>
<li>The cookbook&rsquo;s <code>metadata.rb</code></li>
<li>The node&rsquo;s environment, e.g. in an <code>environment.json</code></li>
<li>The node&rsquo;s role, e.g. in a <code>role.json</code>.  Note: Many chef user&rsquo;s regard this use of roles as an anti-pattern.</li>
<li>The node&rsquo;s runlist, e.g. <code>"run_list": [ "recipe[foo::bar]@0.1.0" ]</code> Note: This is largely undocumented and unsupported. Do not use.</li>
</ul>


<p>Unlike <code>attributes</code>, there is no precedence for cookbook versions. Instead the chef-server&rsquo;s <code>depsolver</code> will find the newest cookbook version to satisfy all the constraints, or throw a 412 error. You may want to read <a href="https://getchef.zendesk.com/hc/en-us/articles/204381030-Troubleshoot-Cookbook-Dependency-Issues">https://getchef.zendesk.com/hc/en-us/articles/204381030-Troubleshoot-Cookbook-Dependency-Issues</a> if you&rsquo;re trying to identify what cookbook constraint is breaking your chef run.</p>

<p>For newer Chef 12 (server &amp; client) installs, one can use Policyfiles instead of the above approach to specify cookbook dependencies.</p>

<h3>Options</h3>

<p>In brief, here are the options you have:</p>

<ol>
<li>Use an older version of the offending cookbook</li>
<li>Fork the offending cookbook and yank the stuff that requires a version newer than you want to use. (Or don&rsquo;t use the perforce cookbook at all, write one that does only what you need)</li>
<li>Bump to Windows 1.38.0 everywhere</li>
<li>Move the cookbook constraints from environments to cookbooks</li>
<li>Create a microenvironment where you could pin to Windows 1.38.0</li>
<li>Use policyfiles for the nodes in question</li>
</ol>


<p>In more detail:</p>

<h4>Use an older version of the offending cookbook</h4>

<p>If you really want to keep your cookbooks as they are on the Supermarket, this may be an approach that works for you. Or the cookbook author may be able to respond to an issue submission or a pull-request if you have fix that works with wider cookbook version constraints.</p>

<h4>Fork the offending cookbook and yank the stuff that requires a version newer than you want to use. (Or don&rsquo;t use the perforce cookbook at all, write one that does only what you need)</h4>

<p>In this case you are maintaining your own code, but that may be more maintainable than using the Supermarket cookbook</p>

<h4>Bump to Windows 1.38.0 everywhere</h4>

<p>If you have a solid cookbook development and testing pipeline, this is arguably the best solution as you want to keep your code on &lsquo;master&rsquo; as much as possible. However, if your pipeline is still in the works, or you work under change management constraints, you may not have this option.</p>

<h4>Move the cookbook constraints from environments to cookbooks</h4>

<p>However, if you have lots of cookbooks, or have a workflow that leverages <code>berks apply</code> or otherwise is tuned to dependency constraints in environments, then this option is a non-starter.</p>

<h4>Create a <code>microenvironment</code> where you could pin to 1.38.0</h4>

<p>I don&rsquo;t know if <code>microenvironment</code> is a common term for this, but if your currently have, say, <code>sandbox</code>, <code>dev</code>, <code>qa</code>, <code>preprod</code> and <code>prod</code> environments, then you may be okay adding just an <code>appdev</code> environment. However, if your role is ubiquitous, then you might have to go with five new envs: <code>sandbox_appdev</code>, <code>dev_appdev</code>, etc.</p>

<h4>Use policyfiles for the nodes in question</h4>

<p>Chef Policyfile was developed with just this sort of use-case in mind. You could apply a Policy for the <code>appdev</code> nodes in your orgs while leaving all the other nodes in the Chef 11/12 constraint solution world. The Chef Server 12.2.0 and higher can support both types of nodes just fine, so you might want to use this as an opportunity to start working with Policyfile for your applications and nodes.</p>

<p>See also: <a href="https://docs.chef.io/policy.html">https://docs.chef.io/policy.html</a> and <a href="https://www.chef.io/blog/2015/08/18/policyfiles-a-guided-tour/">https://www.chef.io/blog/2015/08/18/policyfiles-a-guided-tour/</a> and <a href="https://github.com/chef/chef-dk/blob/master/POLICYFILE_README.md">https://github.com/chef/chef-dk/blob/master/POLICYFILE_README.md</a></p>

<h1>Related Articles</h1>

<p><a href="https://docs.chef.io/cookbook_versions.html">Chef Docs on Cookbook Versions</a></p>

<p><a href="https://getchef.zendesk.com/hc/en-us/articles/204381030-Troubleshoot-Cookbook-Dependency-Issues">Troubleshoot Cookbook Dependency Issues</a></p>

<h1>Update</h1>

<p>In this case, the problem was solved by the <code>perforce</code> cookbook getting an update to relax the constraints on the versions of the windows cookbook, a variation of number 1, above.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Chef-vault and Autoscaling Don't Mix]]></title>
    <link href="http://pburkholder.github.io/blog/2015/12/04/why-chef-vault-and-autoscaling-dont-mix/"/>
    <updated>2015-12-04T10:04:06-05:00</updated>
    <id>http://pburkholder.github.io/blog/2015/12/04/why-chef-vault-and-autoscaling-dont-mix</id>
    <content type="html"><![CDATA[<p>[Note: The opinions here are mine and do not reflect a position of my employer, Chef Inc.]</p>

<p>I received this question through our support team:</p>

<blockquote><p>We’ve got a handful of cookbooks that rely on Chef Vault to pick up some secrets – passwords, SSL certs, etc. When we bootstrap new nodes with vault-dependent cookbooks in the run list, the chef-client run fails because the node doesn’t have access to the vault. There seems to be a ‘chicken and egg’ scenario in that we can’t seem add a new node’s host key to a vault during bootstrap – adding an existing node to a vault happens with a knife search, which requires a node to have successfully completed a chef-client run and be registered with the server, but our fresh nodes haven’t done this (and fail due to this…). I think you can see where I’m going with this. I’ve found some discussions around this on the web and have seen that knife bootstrap appears to have some switches for vault, so I tend to believe what we’re trying to do is possible – just haven’t had any success.</p>

<p>Our new nodes are launched on [a cloud] by an automated process &hellip;, but during the customization step of provisioning (cloudinit perhaps?) the bootstrap is kicked off on the node and the run list is converged.</p></blockquote>

<p>Here&rsquo;s my response:</p>

<h1>ChefVault and knife bootstrap</h1>

<p>I&rsquo;m going to assume you are already familiar with the <a href="https://github.com/chef/chef-vault/blob/master/THEORY.md">theory behind chef-vault</a>, as you&rsquo;ll need that background when implementing chef-vault for an organization. For the first part of your use-case, how to bootstrap a node when using chef-vault, you can use features of <code>validatorless-bootstrap</code> when the bootstrapping client (e.g. your workstation) has an administrative key on the chef-server.</p>

<p>One of my chef-vault demos has commands like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife bootstrap ec2-52-2-56-144.compute-1.amazonaws.com \
</span><span class='line'>    -N testvault-i-35a4119d   -r 'role[sensu_chefvault]' \
</span><span class='line'>    --bootstrap-vault-json '{"sensu_vault":["rabbitmq"]}'</span></code></pre></td></tr></table></div></figure>


<p>which generates the output like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Creating new client for testvault-i-35a4119d
</span><span class='line'>Creating new node for testvault-i-35a4119d
</span><span class='line'>Connecting to ec2-52-2-56-144.compute-1.amazonaws.com</span></code></pre></td></tr></table></div></figure>


<p>What&rsquo;s going on here is that the <code>-N testvault-i-35a4119d  -r 'role[sensu_chefvault]'</code> options create a new <code>node</code> and <code>client</code> on the chef-server, with runlist &lsquo;role[sensu_chefvault]&rsquo;, even if the box in question doesn&rsquo;t exist yet. Further, the the <code>--bootstrap-vault-json '{"sensu_vault":["rabbitmq"]}'</code> specifies a vault and item to rekey before continuing with the bootstrap.</p>

<p>When the <code>knife bootstrap</code> continues, the newly bootstrapped node will get its private key from the workstation, save it as <code>/etc/chef/client.pem</code>, and can use that to unlock the vault items it needs. This works &ndash; it has the key, and the vault has been re-keyed/refreshed from the workstation to allow vault access to testvault-i-35a4119d.</p>

<p>This works great for provisioning/bootstrapping a few nodes from your workstation, but the second part of your question is where things get hairy. In an autoscaling setup with chef-vault you would need to delegate a node in your environment with a large part of the authority that is usually reserved to administrative workstations:</p>

<h1>About chef-vault and autoscaling</h1>

<p>Before we go on, bear in mind what my colleague Nathan Cerney says when talking about secrets and Chef:</p>

<blockquote><p>Secrets management is about a balance between how much you care about your secrets and how much work you’re willing to do.</p></blockquote>

<p>Chef-vault is certainly a step up from generic encrypted data_bags; it&rsquo;s an elegant design and a great fit for relatively static sites. But I find that chef-vault is a poor fit to autoscaling situations for the following reasons:</p>

<ol>
<li>You would need some privileged node that has the &ldquo;keys to the kingdom&rdquo; to rekey all your vaults for the clients as they come up, which may put some security conscious folks on edge.</li>
<li>It&rsquo;s completely on you to write an auditing/authorization framework around that privileged node, as there&rsquo;s nothing in chef-vault that provides that</li>
<li>The provisioning process would have to be single-threaded or use some locking around the vault databags or your vaults will get out of sync, or possibly corrupted</li>
<li>If you&rsquo;re not willing to delegate rekeying of the vaults to a provisioning node, then you need a human admin to rekeying the vaults with the new search results, and then you have to re-run chef (defeating the whole purpose of autoscaling and automaed provisioning)</li>
<li>You&rsquo;re potentially subject to node impersonation attacks, which I describe below</li>
<li>Chef-Vault assumes that the set of Chef-Server administrators includes the set of secret administrators, but this is neither true, nor generally desirable. It&rsquo;s not directly related to autoscaling, but is a point to bear in mind when managing secrets for larger organizations - as <a href="https://www.chef.io/blog/2015/04/28/guest-post-chef-vault-with-large-teams/">noted in this Chef vault blog post</a></li>
</ol>


<p>So, now that the bad news is out of the way, how do you manage secrets with Chef in an autoscaling situation?</p>

<p>Noah Kantrowitz has a good 2014 survey of Chef &amp; Secrets landscape here: <a href="https://coderanger.net/chef-secrets/">https://coderanger.net/chef-secrets/</a> but there have been some interesting developments since then. Three tools you should definitely evaluate are:</p>

<ul>
<li><a href="https://www.vaultproject.io/">Hashicorp Vault</a> - open-source project from Hashicorp</li>
<li><a href="https://www.conjur.net/products/secrets-management">Conjur</a> - commercial project from Conjur; distributed as an appliance, either an AWS instance, VM or Docker image you deploy internally</li>
<li><a href="https://blog.conjur.net/introducing-summon">Conjur Summons</a> - - summon is an opensource secrets bus that interoperates with other secret backends. I happen to be evaluating it this week, based on this sample cookbook: (<a href="https://github.com/conjurinc/summon-chefapi">https://github.com/conjurinc/summon-chefapi</a>)</li>
</ul>


<p>Conjur has some features that I find pretty compelling, one that is relevant here is the <code>hostfactory</code> feature. Any host in a Conjur environment has to have a key to access its secrets. You can authorize hosts yourself as an admin, or you can assign a <code>hostfactory</code> token to an application to delegate host token creation to it, which is what you&rsquo;d want in an autoscaling setup. I have a <a href="https://github.com/pburkholder/conjur_demo">janky demo here</a> if you&rsquo;re interested.</p>

<p>Hashicorp Vault has also generated a lot of interest in the last year. The server is open source, and has an h/a mode with Consul. The folks at Bloomberg have a cookbook for management: <a href="https://github.com/johnbellone/vault-cookbook">https://github.com/johnbellone/vault-cookbook</a></p>

<p>A few other players in the secrets space that Noah didn&rsquo;t mention that I&rsquo;m aware of:
- KeyWhiz
- AWS KMS
- Sneaker (AWS KMS backend)
- Thycotic
- CyberArk</p>

<h1>General guidance around secrets with Chef</h1>

<p>You can think about secrets-management with Chef in a hierarchy:</p>

<ol>
<li>Encrypted data bags(EDBs) with secrets common to all nodes</li>
<li>EDBs with secrets shared only among nodes with a common role or run_list</li>
<li>Chef-Vault, or EDBs with the EDB decryption key provided from Chef-Vault</li>
<li>You may want to take this approach so you can evolve your secrets management from decryption keys coming from chef-vault, to some other service providing the keys.</li>
<li>As Nathan pointed out, this approach means you &ldquo;have an encrypted data bag, protected by a [key] that’s stored in an encrypted data bag protected by a secret that’s stored in an encrypted data bag protected by the client’s key,&rdquo; so it&rsquo;s less than ideal</li>
<li>Secret storage services: Conjur or Hashicorp Vault or Red October or the like</li>
<li>Hardware platforms (HSMs) that are FIPs-compliant and require N approvals and a time-lock</li>
</ol>


<p> Each step up makes your infrastructure more complicated, but protects your secrets better. But even Step 1 is immeasurably better than storing secrets in clear-text, and you shouldn&rsquo;t let the perfect be the enemy of the good. Choose an implementation you can realize, then iterate to make it better.</p>

<h1>What is Chef Inc doing to help?</h1>

<p>This is some of what&rsquo;s going on here: [Again, not official]</p>

<ol>
<li>Providing better documentation and guidance</li>
<li>This response is a first draft of new knowledge base article, which will incorporate Noah&rsquo;s blog post, with updates</li>
<li>Taking ownership of Chef Vault. The project was originally a Nordstrom project, and they&rsquo;ve bequeathed it to us we can continue engineering on it while understanding its limitations</li>
<li>Building better examples of integrating Chef and EDBs with third-party secret providers &ndash; this work is already underway on my team, and questions like yours help spur on that effort.</li>
</ol>


<p>Hope that helps&hellip;</p>

<p>&ndash;Peter</p>

<h1><a name="node_impersonation"></a>P.S. What&rsquo;s a node impersonation attack?</h1>

<p>Suppose you have:
- a provisioning node that rekeys chef-vault based on updated search results
- an <code>unprivileged</code> role that doesn&rsquo;t have any access to interesting secrets
- a <code>database</code> role that does have access to interesting secrets</p>

<p>If an attacker gains root on an <code>unprivileged</code> node, then s/he can use the client&rsquo;s key to edit the node&rsquo;s role and change it to <code>database</code>. Further, s/he can then just kill chef-client runs on that node so it doesn&rsquo;t actually become a <code>database</code> node.</p>

<p>Next time the chef-vault is rekeyed, the compromised node (and the attacker) will access to all of the <code>database</code> secrets. Ugh.</p>

<p>This same attack works if you have humans doing the rekeying, because, seriously, do you really vet all of the nodes that show up in the search?</p>

<p>This attack against chef-vault will not be possible when <a href="https://github.com/chef/chef-rfc/blob/master/rfc045-node_state_separation.md">Chef RFC 45</a> is fully implemented, since you can then administratively lock a node&rsquo;s runlist. Pending that implementation, one can also use <a href="http://xanzy.io/projects/chef-guard/introduction/overview.html">Chef-Guard</a> to filter such attacks, or <a href="https://docs.chef.io/analytics.html">Chef Analytics</a> to alert on attempts after-the-fact.</p>

<p><em>Update 2015.12.11</em>: Root compromise is not necessary for impersonation.
Filching any <code>client.pem</code> <em>or</em> a <code>validation.pem</code> will suffice to update or create
client/node objects that match the search criteria, and access vaults.
<em>Protect your keys</em>.</p>

<p>Other references:
<a href="https://blog.conjur.net/lets-talk-encrypted-data-bags">https://blog.conjur.net/lets-talk-encrypted-data-bags</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DevOpsDays DC Quick Takeaways]]></title>
    <link href="http://pburkholder.github.io/blog/2015/06/26/devopsdays-dc-quick-takeaways/"/>
    <updated>2015-06-26T18:19:10-04:00</updated>
    <id>http://pburkholder.github.io/blog/2015/06/26/devopsdays-dc-quick-takeaways</id>
    <content type="html"><![CDATA[<p>DevOpsDays DC key points</p>

<ul>
<li>John Willis thinks we have lots of reading time on our hands</li>
<li>Lean Enterprise was focus of one session talk: &ldquo;I read this book and here is
how I implemented it and it worked for us&rdquo;</li>
<li>Josh Corman&rsquo;s talk on Rugged DevOps was one of the more interesting relevant
ones

<ul>
<li>&lsquo;root access is a bug&rsquo;</li>
<li>&lsquo;give devs a tool before taking one away&rsquo;</li>
</ul>
</li>
<li>OpenSCAP talk: A lot of the same design goals as Chef audit-mode. Lots of
  support scans for platforms already. Haven&rsquo;t looked at it yet. Julian may
  also have thoughts on it.

<ul>
<li>Fed space loves opensource since procurement process for COTS is so
painful.</li>
</ul>
</li>
<li>Ken Johnson and Mike Nescott&rsquo;s talk on DevOops security also pretty
interesting/relevant to the fed space.</li>
</ul>


<p>Open space on Windows Automation
 - Lots of Powershell
 - Success stories around <a href="https://octopusdeploy.com/">https://octopusdeploy.com/</a> Octopus for deployments
   being used to automate release
 - WINDOWS ADMINS WANT CHEF SERVER TO RUN ON WINDOWS.
   - Just like Linux/Unix admins shudder when they&rsquo;re told they have to run a
    core service that is Windows only.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RFC Report 2015 Jun 18]]></title>
    <link href="http://pburkholder.github.io/blog/2015/06/18/rfc-report-2015-jun-18/"/>
    <updated>2015-06-18T12:41:05-04:00</updated>
    <id>http://pburkholder.github.io/blog/2015/06/18/rfc-report-2015-jun-18</id>
    <content type="html"><![CDATA[<h2>Community updates:</h2>

<p>Chef Community Summit - <a href="http://summit.chef.io">http://summit.chef.io</a> Oct 14-15 in Seattle.
London will be November 3 &amp; 4. Registration for that should open by end of
next week or so. Mark your calendars</p>

<p>ChefConf 2016 will be moved as May conflicted with partner conferences. New
dates to be announced soon.</p>

<p>Mailing list migration to Google Groups not happening for technical reasons.
May move to Discourse; discussions underway. Other stuff:</p>

<p>Product Feedback - <a href="http://feedback.chef.io">http://feedback.chef.io</a> - read, contribute, comment, and
vote on things that fall outside of support requests, this RFC process, etc.
and <a href="http://www.meetup.com/Chef-Office-Hours/">http://www.meetup.com/Chef-Office-Hours/</a> where we&rsquo;ve been announcing
regular Chef Office Hours</p>

<p>Also, <a href="https://github.com/chef/chef-rfc/blob/master/rfc029-governance-policy.md">https://github.com/chef/chef-rfc/blob/master/rfc029-governance-policy.md</a>
CBGB members need to be selected.</p>

<h2>Product updates</h2>

<p>Chef server 12.1, Ent Server 11.3.2 are in progress, patching Redis is a big
push here.  Manage and Supermarked updates coming soon too.</p>

<h2>RFCs</h2>

<p><a href="https://github.com/chef/chef-rfc/pull/118">https://github.com/chef/chef-rfc/pull/118</a> garnered the most discussion.
Consensus is that having Ohai behave on the CLI like it does during a Chef run
is a nice win, but there are some details still being ironed out.  Also,
moving the hints systems into a central config will probably help our users.</p>

<blockquote><p> The core desire is to have a way to configure ohai so that things like knife bootstrap can leave the system set up so that ohai run directly and ohai run from Chef will behave the same way.
[the] most illustrative use cases so far:
 -  I want to disable an ohai plugin,
 - I want to set the ohai plugin path.
 - I want to change the source of data for the hostname plugin.
 - I want to retrieve EC2 metadata in the ec2 plugin.</p></blockquote>

<p>RFCs to move OpenBSD to tier 2 approved and changing <code>resource attributes</code> to
<code>resource properties</code> also approved
(<a href="https://github.com/chef/chef-rfc/pull/128">https://github.com/chef/chef-rfc/pull/128</a>) &ndash; This is a pretty interesting
change.  Ubuntu 10.04 is on track to be yanked.</p>

<h2>Next time</h2>

<p><a href="https://github.com/chef/chef-rfc/pull/135">https://github.com/chef/chef-rfc/pull/135</a> - some proposals to change resource property default behaviors. Mostly I&rsquo;m opposed to adding more API keywords as they only have utility in some edge cases, and make the finding the useful API methods harder to find and use.
<a href="https://github.com/chef/chef-rfc/pull/136">https://github.com/chef/chef-rfc/pull/136</a> - clarify some Chef resoure naming precedence</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[That Thing to Add Packaged Gems Into Your GEM PATH]]></title>
    <link href="http://pburkholder.github.io/blog/2015/05/04/that-thing-add-packaged-gems-into-your-gem-path/"/>
    <updated>2015-05-04T09:28:51-04:00</updated>
    <id>http://pburkholder.github.io/blog/2015/05/04/that-thing-add-packaged-gems-into-your-gem-path</id>
    <content type="html"><![CDATA[<p>It&rsquo;s <code>Gem::Specification.reset</code>  For example, in a Chef cookbook I&rsquo;m installing the <code>conjur</code> package from
<a href="https://conjur.net">Conjur</a>, and need those Gems available to me during
Chef&rsquo;s compilation. So:</p>

<pre><code># Install from a downloaded .deb (or .rpm)
dpkg_package "conjur" do
  source target_path
end.run_action(:install)

# Append those embedded gems in my path:
Gem.path &lt;&lt; "/opt/conjur/embedded/lib/ruby/gems/2.1.0"

# And reload the Gem specifications that are in your .path
Gem::Specification.reset()
</code></pre>

<p>It may also be sufficient to do <code>Gem.clear_paths</code>, but that also sets your
Gem.paths to <code>nil</code> so that doesn&rsquo;t seem right. Haven&rsquo;t tested.</p>

<p>Maybe I should make a PR to alias that to <code>Gem.reload_paths</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emulating Cookbook Semver Build Numbers With Chef Policyfiles]]></title>
    <link href="http://pburkholder.github.io/blog/2015/04/23/emulating-cookbook-semver-build-numbers-with-chef-policyfiles/"/>
    <updated>2015-04-23T18:10:22-04:00</updated>
    <id>http://pburkholder.github.io/blog/2015/04/23/emulating-cookbook-semver-build-numbers-with-chef-policyfiles</id>
    <content type="html"><![CDATA[<p>This is a posting of [<a href="https://github.com/pburkholder/buildnumber/blob/master/README.md">https://github.com/pburkholder/buildnumber/blob/master/README.md</a>]</p>

<h1>policyfiles and builds</h1>

<p>Demonstrate use of policyfiles to emulate build number increments.</p>

<h2>Scenario</h2>

<p>We assume some build process that bundles a Chef cookbook as the generated artifact, and then includes that cookbook in the run_list of nodes in the same env:</p>

<pre><code>run_list: 'recipe[base@0.1.0], recipe[myapp@0.1.0]'
</code></pre>

<p>However, the myapp recipe configure index.html via a template to render the build number as well:</p>

<pre><code>&lt;h1&gt;Welcome to myapp&lt;/h1&gt;
&lt;ul&gt;
 &lt;li&gt;Version: 0.1.0&lt;/li&gt;
 &lt;li&gt;Build: 1001&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>The &lsquo;base&rsquo; recipe is unchanged in each build, but the &lsquo;myapp&rsquo; recipe has an data_file that is incremented with each build.</p>

<p>Builds are generated and tested on ephemeral nodes. The build are pushed as the policy for the role &lsquo;myapp&rsquo;, and are labelled with policy_groups that correspond to each build, e.g.:</p>

<ul>
<li>myapp-0.1.0-0</li>
<li>myapp-0.1.0-1</li>
</ul>


<p>When build myapp-0.1.0-1 passes, then it&rsquo;s promoted to the &lsquo;prod&rsquo; policy_group and then the &lsquo;prod&rsquo; node converges with that new policy based on the bundled cookbooks.</p>

<h2>Chef Server setup</h2>

<p>No recipe for this yet. DNS is chefserver.cheffian.com. To do:</p>

<ul>
<li>install chef-server 12.0.7 per <a href="https://www.chef.io/blog/2015/03/27/chef-server-12-0-7-released/">https://www.chef.io/blog/2015/03/27/chef-server-12-0-7-released/</a></li>
<li><p><code>/etc/opscode/chef-server.rb</code> (you need to run chef-server-ctl reconfigure to make it take effect):</p>

<pre><code>lb["xdl_defaults"]["policies"] = true
api_fqdn 'chefserver.cheffian.com'
# NOT SURE IF NEEDED:
</code></pre></li>
<li><p>create a user and an organization with that user associated (<code>-a</code>):
    sudo chef-server-ctl user-create pdb Peter Burkholder <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#112;&#x62;&#x75;&#x72;&#x6b;&#104;&#111;&#108;&#x64;&#101;&#114;&#64;&#99;&#104;&#101;&#x66;&#x2e;&#105;&#x6f;">&#x70;&#98;&#117;&#x72;&#107;&#x68;&#111;&#x6c;&#x64;&#101;&#x72;&#64;&#99;&#x68;&#101;&#x66;&#46;&#105;&#111;</a> TestPassword -f pdb.pem
    sudo chef-server-ctl org-create pdb_org pdb_org -f pdb_org.pem -a pdb</p></li>
<li>make <code>current_dir/.chef/knife.rb</code> and copy the above .pem file into the <code>.chef</code> directory:
    cd .chef
    scp ubuntu@chefserver.cheffian.com:pdb.pem .
    scp ubuntu@chefserver.cheffian.com:pdb_org.pem .</li>
<li>fetch the ssl cert:
    knife ssl fetch <a href="https://chefserver.cheffian.com">https://chefserver.cheffian.com</a></li>
<li>test with <code>knife user list</code>:</li>
</ul>


<h2>Cookbooks and Clients:</h2>

<h3>First lets get the simplest case down</h3>

<p>Commit <code>pdb/policyfile 0211fbb</code>is where I have base cookbook installing httpd, and the myapp cookbook installing the index.html with build number from <code>libraries/build.json</code>. The <code>kitchen verify</code> should pass.</p>

<h3>Onwards and local setup</h3>

<p>Install 0.5.0 of ChefDK:</p>

<pre><code>curl "http://www.chef.io/chef/metadata-chefdk?p=mac_os_x&amp;pv=10.10&amp;m=x86_64&amp;prerelease=true"
</code></pre>

<p>Update knife.rb with add&#8217;l configuration parameters:</p>

<pre><code>use_policyfile true
policy_document_native_api true

#policy_name 'jenkins'
#policy_group 'dev'
</code></pre>

<p>Now I create <code>cookbooks/myapp/Policyfile.rb</code> and run <code>chef install -D</code>:</p>

<pre><code>chef install -D
Building policy myapp
Expanded run list: recipe[base], recipe[myapp]
Caching Cookbooks...
Installing base  &gt;= 0.0.0 from path
Installing myapp &gt;= 0.0.0 from path
Installing apt   2.7.0
Installing httpd 0.2.11
</code></pre>

<p>and push that as &lsquo;myapp-0.1.0-0&rsquo; using the &lsquo;policygroup&rsquo; feature</p>

<pre><code>chef push myapp-0.1.0-0
Uploading policy to policy group myapp-0.1.0-0
WARN: Using native policy API preview mode. You may be required to delete and
re-upload this data when upgrading to the final release version of the feature.
Uploaded base  0.1.0  (f5cdaad1)
Uploaded myapp 0.1.0  (81a87a95)
Uploaded apt   2.7.0  (16c57abb)
Uploaded httpd 0.2.11 (3c562c6a)
</code></pre>

<h2>Try it on a node</h2>

<p>I have set up in aws the nodes &lsquo;p0.cheffian.com&rsquo;, &lsquo;p1&hellip;.&rsquo;, and &lsquo;p2&hellip;.&rsquo;</p>

<p>Not setting any runlist the first time, then going back and editing client.rb to use the Policyfile endpoints and features.</p>

<pre><code>knife bootstrap p0.cheffian.com -x ubuntu -r '' -N p0 --sudo

# Note that my pdb_org.pem didn't work so I rm the validation lines
# from knife.rb to use my personal creds
</code></pre>

<p>then on <code>p0.cheffian.com</code> set policy_name and policy_group:</p>

<pre><code>log_location     STDOUT
chef_server_url  "https://chefserver.cheffian.com/organizations/pdb_org"
validation_client_name "chef-validator"
node_name "p0"
trusted_certs_dir "/etc/chef/trusted_certs"

use_policyfile true
policy_document_native_api true
policy_name  'myapp'
policy_group 'myapp-0.1.0-0'
</code></pre>

<p>and that works.</p>

<p>Now I tag build 0.1.0-0 and push that to our origin git repo.</p>

<h2>Now build 1</h2>

<h3>on the workstation:</h3>

<p>We change <code>myapp/files/default/build.json</code> to build 1, and:</p>

<pre><code>rm Policyfile.lock.json
</code></pre>

<p>and re-run:</p>

<pre><code>chef install -D
</code></pre>

<p>to update the Policyfile.lock.json. Then:</p>

<pre><code>chef push myapp-0.1.0-1

git commit -am "0.1.0-1"
git tag -m 0.1.0-1 0.1.0-1
git push origin master
git push origin 0.1.0-1
</code></pre>

<p>OR: just run <code>rake bump build tag</code></p>

<h3>Now lets set up the target node:</h3>

<p>bootstrap the node:</p>

<pre><code>knife bootstrap p1.cheffian.com -x ubuntu -r '' -N p1 --sudo
</code></pre>

<p>Then:</p>

<pre><code>ssh p1.cheffian.com
sudo bash
cd /etc/chef

cat &gt;&gt; client.rb
use_policyfile true
policy_document_native_api true
policy_name  'myapp'
policy_group 'myapp-0.1.0-1'
 ^D
</code></pre>

<p>Lastly run the client and confirm</p>

<pre><code>sudo chef-client
curl localhost
</code></pre>

<h3>Lastly we promote this build of myapp to prod</h3>

<p>Here we go:</p>

<pre><code>git checkout 0.1.0-1
chef push prod
chef push prod
  Uploading policy to policy group prod
  WARN: Using native policy API preview mode. You may be required to delete and
  re-upload this data when upgrading to the final release version of the feature.
  Using    base  0.1.0  (fc79b25d)
  Using    apt   2.7.0  (16c57abb)
  Using    httpd 0.2.11 (3c562c6a)
  Uploaded myapp 0.1.0  (90a39ad0)
</code></pre>

<p>Check with <code>knife raw</code> the policy for &lsquo;myapp&rsquo; in the &lsquo;prod&rsquo; policy_group</p>

<pre><code>knife raw /policy_groups/prod/policies/myapp | egrep -B2 \"identifier
    "base": {
      "version": "0.1.0",
      "identifier": "fc79b25dc1ac842bdf342a65a2dda0d83d929c12",
--
    "myapp": {
      "version": "0.1.0",
      "identifier": "90a39ad0ad73ff3b245e1c5ede2a60a437349a73",
--
    "apt": {
      "version": "2.7.0",
      "identifier": "16c57abbd056543f7d5a15dabbb03261024a9c5e",
--
    "httpd": {
      "version": "0.2.11",
      "identifier": "3c562c6ac6ac554b4a11a0ad4c522fab246bf8b3",
</code></pre>

<p>The prod node always has the &lsquo;prod policy group&rsquo; as in the this &lsquo;/etc/chef/client.rb&rsquo;:</p>

<pre><code>log_location     STDOUT
chef_server_url  "https://chefserver.cheffian.com/organizations/pdb_org"
validation_client_name "chef-validator"
node_name "prod"
trusted_certs_dir "/etc/chef/trusted_certs"

use_policyfile true
policy_document_native_api true
policy_name  'myapp'
policy_group 'prod'
</code></pre>

<p>And now that we&rsquo;ve promoted to &lsquo;prod&rsquo; policygroup the chef-client run produces this html:</p>

<pre><code>&lt;h1&gt;Welcome to myapp&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;Version: 0.1.0&lt;/li&gt;
  &lt;li&gt;Build: 1 &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>Fini.</p>
]]></content>
  </entry>
  
</feed>
